{
  "broker.id": {
    "default": null,
    "description": "Each broker is uniquely identified by a non-negative integer id. This id serves as the brokers \"name\" and allows the broker to be moved to a different host/port without confusing consumers. You can choose any number you like so long as it is unique.\n\t"
  },
  "log.dirs": {
    "default": "/tmp/kafka-logs",
    "description": "A comma-separated list of one or more directories in which Kafka data is stored. Each new partition that is created will be placed in the directory which currently has the fewest partitions."
  },
  "port": {
    "default": "6667",
    "description": "The port on which the server accepts client connections."
  },
  "zookeeper.connect": {
    "default": "null",
    "description": "Specifies the zookeeper connection string in the form hostname:port, where hostname and port are the host and port for a node in your zookeeper cluster. To allow connecting through other zookeeper nodes when that host is down you can also specify multiple hosts in the form hostname1:port1,hostname2:port2,hostname3:port3.\n\t\nZookeeper also allows you to add a \"chroot\" path which will make all kafka data for this cluster appear under a particular path. This is a way to setup multiple Kafka clusters or other applications on the same zookeeper cluster. To do this give a connection string in the form hostname1:port1,hostname2:port2,hostname3:port3/chroot/path which would put all this cluster's data under the path /chroot/path. Note that you must create this path yourself prior to starting the broker and consumers must use the same connection string."
  },
  "message.max.bytes": {
    "default": "1000000",
    "description": "The maximum size of a message that the server can receive. It is important that this property be in sync with the maximum fetch size your consumers use or else an unruly producer will be able to publish messages too large for consumers to consume."
  },
  "num.network.threads": {
    "default": "3",
    "description": "The number of network threads that the server uses for handling network requests. You probably don't need to change this."
  },
  "num.io.threads": {
    "default": "8",
    "description": "The number of I/O threads that the server uses for executing requests. You should have at least as many threads as you have disks."
  },
  "queued.max.requests": {
    "default": "500",
    "description": "The number of requests that can be queued up for processing by the I/O threads before the network threads stop reading in new requests."
  },
  "host.name": {
    "default": "null",
    "description": "\nHostname of broker. If this is set, it will only bind to this address. If this is not set, it will bind to all interfaces, and publish one to ZK.\n"
  },
  "socket.send.buffer.bytes": {
    "default": "100 * 1024",
    "description": "The SO_SNDBUFF buffer the server prefers for socket connections."
  },
  "socket.receive.buffer.bytes": {
    "default": "100 * 1024",
    "description": "The SO_RCVBUFF buffer the server prefers for socket connections."
  },
  "socket.request.max.bytes": {
    "default": "100 * 1024 * 1024",
    "description": "The maximum request size the server will allow. This prevents the server from running out of memory and should be smaller than the Java heap size."
  },
  "num.partitions": {
    "default": "1",
    "description": "The default number of partitions per topic."
  },
  "log.segment.bytes": {
    "default": "1024 * 1024 * 1024",
    "description": "The log for a topic partition is stored as a directory of segment files. This setting controls the size to which a segment file will grow before a new segment is rolled over in the log."
  },
  "log.segment.bytes.per.topic": {
    "default": "\"\"",
    "description": "This setting allows overriding log.segment.bytes on a per-topic basis."
  },
  "log.roll.hours": {
    "default": "24 * 7",
    "description": "This setting will force Kafka to roll a new log segment even if the log.segment.bytes size has not been reached."
  },
  "log.roll.hours.per.topic": {
    "default": "\"\"",
    "description": "This setting allows overriding log.roll.hours on a per-topic basis."
  },
  "log.retention.hours": {
    "default": "24 * 7",
    "description": "The number of hours to keep a log segment before it is deleted, i.e. the default data retention window for all topics. Note that if both log.retention.hours and log.retention.bytes are both set we delete a segment when either limit is exceeded."
  },
  "log.retention.hours.per.topic": {
    "default": "\"\"",
    "description": "A per-topic override for log.retention.hours."
  },
  "log.retention.bytes": {
    "default": "-1",
    "description": "The amount of data to retain in the log for each topic-partitions. Note that this is the limit per-partition so multiply by the number of partitions to get the total data retained for the topic. Also note that if both log.retention.hours and log.retention.bytes are both set we delete a segment when either limit is exceeded."
  },
  "log.retention.bytes.per.topic": {
    "default": "\"\"",
    "description": "A per-topic override for log.retention.bytes."
  },
  "log.retention.check.interval.ms": {
    "default": "300000",
    "description": "The frequency in milliseconds that the log cleaner checks whether any log segment is eligible for deletion to meet the retention policies."
  },
  "log.index.size.max.bytes": {
    "default": "10 * 1024 * 1024",
    "description": "The maximum size in bytes we allow for the offset index for each log segment. Note that we will always pre-allocate a sparse file with this much space and shrink it down when the log rolls. If the index fills up we will roll a new log segment even if we haven't reached the log.segment.bytes limit."
  },
  "log.index.interval.bytes": {
    "default": "4096",
    "description": "The byte interval at which we add an entry to the offset index. When executing a fetch request the server must do a linear scan for up to this many bytes to find the correct position in the log to begin and end the fetch. So setting this value to be larger will mean larger index files (and a bit more memory usage) but less scanning. However the server will never add more than one index entry per log append (even if more than log.index.interval worth of messages are appended). In general you probably don't need to mess with this value."
  },
  "log.flush.interval.messages": {
    "default": "10000",
    "description": "The number of messages written to a log partition before we force an fsync on the log. Setting this higher will improve performance a lot but will increase the window of data at risk in the event of a crash (though that is usually best addressed through replication). If both this setting and log.flush.interval.ms are both used the log will be flushed when either criteria is met."
  },
  "log.flush.interval.ms.per.topic": {
    "default": "\"\"",
    "description": "The per-topic override for log.flush.interval.messages, e.g., topic1:3000,topic2:6000"
  },
  "log.flush.scheduler.interval.ms": {
    "default": "3000",
    "description": "The frequency in ms that the log flusher checks whether any log is eligible to be flushed to disk."
  },
  "log.flush.interval.ms": {
    "default": "3000\n     ",
    "description": "The maximum time between fsync calls on the log. If used in conjuction with log.flush.interval.messages the log will be flushed when either criteria is met."
  },
  "auto.create.topics.enable": {
    "default": "true",
    "description": "Enable auto creation of topic on the server.  If this is set to true then attempts to produce, consume, or fetch metadata for a non-existent topic will automatically create it with the default replication factor and number of partitions."
  },
  "controller.socket.timeout.ms": {
    "default": "30000",
    "description": "The socket timeout for commands from the partition management controller to the replicas."
  },
  "controller.message.queue.size": {
    "default": "10",
    "description": "The buffer size for controller-to-broker-channels"
  },
  "default.replication.factor": {
    "default": "1",
    "description": "The default replication factor for automatically created topics."
  },
  "replica.lag.time.max.ms": {
    "default": "10000",
    "description": "If a follower hasn't sent any fetch requests for this window of time, the leader will remove the follower from ISR (in-sync replicas) and treat it as dead."
  },
  "replica.lag.max.messages": {
    "default": "4000",
    "description": "If a replica falls more than this many messages behind the leader, the leader will remove the follower from ISR and treat it as dead."
  },
  "replica.socket.timeout.ms": {
    "default": "30 * 1000",
    "description": "The socket timeout for network requests to the leader for replicating data."
  },
  "replica.socket.receive.buffer.bytes": {
    "default": "64 * 1024",
    "description": "The socket receive buffer for network requests to the leader for replicating data."
  },
  "replica.fetch.max.bytes": {
    "default": "1024 * 1024",
    "description": "The number of byes of messages to attempt to fetch for each partition in the fetch requests the replicas send to the leader."
  },
  "replica.fetch.wait.max.ms": {
    "default": "500",
    "description": "The maximum amount of time to wait time for data to arrive on the leader in the fetch requests sent by the replicas to the leader."
  },
  "replica.fetch.min.bytes": {
    "default": "1",
    "description": "Minimum bytes expected for each fetch response for the fetch requests from the replica to the leader. If not enough bytes, wait up to replica.fetch.wait.max.ms for this many bytes to arrive."
  },
  "num.replica.fetchers": {
    "default": "1",
    "description": "\nNumber of threads used to replicate messages from leaders. Increasing this value can increase the degree of I/O parallelism in the follower broker.\n"
  },
  "replica.high.watermark.checkpoint.interval.ms": {
    "default": "5000",
    "description": "The frequency with which each replica saves its high watermark to disk to handle recovery."
  },
  "fetch.purgatory.purge.interval.requests": {
    "default": "10000",
    "description": "The purge interval (in number of requests) of the fetch request purgatory."
  },
  "producer.purgatory.purge.interval.requests": {
    "default": "10000",
    "description": "The purge interval (in number of requests) of the producer request purgatory."
  },
  "zookeeper.session.timeout.ms": {
    "default": "6000",
    "description": "Zookeeper session timeout. If the server fails to heartbeat to zookeeper within this period of time it is considered dead. If you set this too low the server may be falsely considered dead; if you set it too high it may take too long to recognize a truly dead server."
  },
  "zookeeper.connection.timeout.ms": {
    "default": "6000",
    "description": "The maximum amount of time that the client waits to establish a connection to zookeeper."
  },
  "zookeeper.sync.time.ms": {
    "default": "2000",
    "description": "How far a ZK follower can be behind a ZK leader."
  },
  "controlled.shutdown.enable": {
    "default": "false",
    "description": "Enable controlled shutdown of the broker. If enabled, the broker will move all leaders on it to some other brokers before shutting itself down. This reduces the unavailability window during shutdown."
  },
  "controlled.shutdown.max.retries": {
    "default": "3",
    "description": "Number of retries to complete the controlled shutdown successfully before executing an unclean shutdown."
  },
  "controlled.shutdown.retry.backoff.ms": {
    "default": "5000",
    "description": "Backoff time between shutdown retries."
  }
}