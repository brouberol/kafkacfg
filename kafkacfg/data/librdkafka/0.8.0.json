{
  "global": {
    "client.id": {
      "default": "rdkafka",
      "description": "Client identifier."
    },
    "metadata.broker.list": {
      "default": "",
      "description": "Initial list of brokers. The application may also use `rd_kafka_brokers_add()` to add brokers during runtime."
    },
    "message.max.bytes": {
      "default": "4000000",
      "description": "Maximum receive message size. This is a safety precaution to avoid memory exhaustion in case of protocol hickups."
    },
    "metadata.request.timeout.ms": {
      "default": "60000",
      "description": "Non-topic request timeout in milliseconds. This is for metadata requests, etc."
    },
    "topic.metadata.refresh.interval.ms": {
      "default": "10000",
      "description": "Topic metadata refresh interval in milliseconds. The metadata is automatically refreshed on error and connect. Use -1 to disable the intervalled refresh."
    },
    "topic.metadata.refresh.fast.cnt": {
      "default": "10",
      "description": "When a topic looses its leader this number of metadata requests are sent with `topic.metadata.refresh.fast.interval.ms` interval disregarding the `topic.metadata.refresh.interval.ms` value. This is used to recover quickly from transitioning leader brokers."
    },
    "topic.metadata.refresh.fast.interval.ms": {
      "default": "250",
      "description": "See `topic.metadata.refresh.fast.cnt` description"
    },
    "debug": {
      "default": "",
      "description": "A comma-separated list of debug contexts to enable: all,generic,broker,topic,metadata,producer,queue,msg"
    },
    "socket.timeout.ms": {
      "default": "60000",
      "description": "Timeout for network requests."
    },
    "broker.address.ttl": {
      "default": "300000",
      "description": "How long to cache the broker address resolving results."
    },
    "statistics.interval.ms": {
      "default": "0",
      "description": "librdkafka statistics emit interval. The application also needs to register a stats callback using `rd_kafka_conf_set_stats_cb()`. The granularity is 1000ms."
    },
    "queued.min.messages": {
      "default": "100000",
      "description": "Minimum number of messages that should to be available for consumption by application."
    },
    "fetch.wait.max.ms": {
      "default": "100",
      "description": "Maximum time the broker may wait to fill the response with fetch.min.bytes."
    },
    "fetch.min.bytes": {
      "default": "1",
      "description": "Minimum number of bytes the broker responds with. If fetch.wait.max.ms expires the accumulated data will be sent to the client regardless of this setting."
    },
    "fetch.error.backoff.ms": {
      "default": "500",
      "description": "How long to postpone the next fetch request for a topic+partition in case of a fetch error."
    },
    "queue.buffering.max.messages": {
      "default": "100000",
      "description": "Maximum number of messages allowed on the producer queue."
    },
    "queue.buffering.max.ms": {
      "default": "1000",
      "description": "Maximum time, in milliseconds, for buffering data on the producer queue."
    },
    "message.send.max.retries": {
      "default": "2",
      "description": "How many times to retry sending a failing MessageSet. **Note:** retrying may cause reordering."
    },
    "retry.backoff.ms": {
      "default": "100",
      "description": "The backoff time in milliseconds before retrying a message send."
    },
    "compression.codec": {
      "default": "none",
      "description": "Compression codec to use for compressing message sets."
    },
    "batch.num.messages": {
      "default": "1000",
      "description": "Maximum number of messages batched in one MessageSet."
    }
  },
  "topic": {
    "request.required.acks": {
      "default": "1",
      "description": "This field indicates how many acknowledgements the leader broker must receive from ISR brokers before responding to the request: *0*=broker does not send any response, *1*=broker will wait until the data is written to local log before sending a response, *-1*=broker will block until message is committed by all in sync replicas (ISRs) before sending response. *>1*=for any number > 1 the broker will block waiting for this number of acknowledgements to be received (but the broker will never wait for more acknowledgements than there are ISRs)."
    },
    "request.timeout.ms": {
      "default": "5000",
      "description": "The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on `request.required.acks` being > 0."
    },
    "message.timeout.ms": {
      "default": "300000",
      "description": "Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery."
    }
  }
}