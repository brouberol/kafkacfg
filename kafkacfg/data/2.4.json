{
  "zookeeper.connect": {
    "description": "Specifies the ZooKeeper connection string in the form  hostname:port  where host and port are the host and port of a ZooKeeper server. To allow connecting through other ZooKeeper nodes when that ZooKeeper machine is down you can also specify multiple hosts in the form  hostname1:port1,hostname2:port2,hostname3:port3 .\nThe server can also have a ZooKeeper chroot path as part of its ZooKeeper connection string which puts its data under some path in the global ZooKeeper namespace. For example to give a chroot path of  /chroot/path  you would give the connection string as  hostname1:port1,hostname2:port2,hostname3:port3/chroot/path .",
    "type": "string",
    "default": "",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "advertised.host.name": {
    "description": "DEPRECATED: only used when  advertised.listeners  or  listeners  are not set. Use  advertised.listeners  instead. \nHostname to publish to ZooKeeper for clients to use. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, it will use the value for  host.name  if configured. Otherwise it will use the value returned from java.net.InetAddress.getCanonicalHostName().",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "advertised.listeners": {
    "description": "Listeners to publish to ZooKeeper for clients to use, if different than the  listeners  config property. In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, the value for  listeners  will be used. Unlike  listeners  it is not valid to advertise the 0.0.0.0 meta-address.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "per-broker"
  },
  "advertised.port": {
    "description": "DEPRECATED: only used when  advertised.listeners  or  listeners  are not set. Use  advertised.listeners  instead. \nThe port to publish to ZooKeeper for clients to use. In IaaS environments, this may need to be different from the port to which the broker binds. If this is not set, it will publish the same port that the broker binds to.",
    "type": "int",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "auto.create.topics.enable": {
    "description": "Enable auto creation of topic on the server",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "auto.leader.rebalance.enable": {
    "description": "Enables auto leader balancing. A background thread checks the distribution of partition leaders at regular intervals, configurable by `leader.imbalance.check.interval.seconds`. If the leader imbalance exceeds `leader.imbalance.per.broker.percentage`, leader rebalance to the preferred leader for partitions is triggered.",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "background.threads": {
    "description": "The number of threads to use for various background processing tasks",
    "type": "int",
    "default": "10",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "broker.id": {
    "description": "The broker id for this server. If unset, a unique broker id will be generated.To avoid conflicts between zookeeper generated broker id's and user configured broker id's, generated broker ids start from reserved.broker.max.id + 1.",
    "type": "int",
    "default": "-1",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "compression.type": {
    "description": "Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.",
    "type": "string",
    "default": "producer",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "control.plane.listener.name": {
    "description": "Name of listener used for communication between controller and brokers. Broker will use the control.plane.listener.name to locate the endpoint in listeners list, to listen for connections from the controller. For example, if a broker's config is :\nlisteners = INTERNAL://192.1.1.8:9092, EXTERNAL://10.1.1.5:9093, CONTROLLER://192.1.1.8:9094\nlistener.security.protocol.map = INTERNAL:PLAINTEXT, EXTERNAL:SSL, CONTROLLER:SSL\ncontrol.plane.listener.name = CONTROLLER\nOn startup, the broker will start listening on \"192.1.1.8:9094\" with security protocol \"SSL\".\nOn controller side, when it discovers a broker's published endpoints through zookeeper, it will use the control.plane.listener.name to find the endpoint, which it will use to establish connection to the broker.\nFor example, if the broker's published endpoints on zookeeper are :\n\"endpoints\" : [\"INTERNAL://broker1.example.com:9092\",\"EXTERNAL://broker1.example.com:9093\",\"CONTROLLER://broker1.example.com:9094\"]\n and the controller's config is :\nlistener.security.protocol.map = INTERNAL:PLAINTEXT, EXTERNAL:SSL, CONTROLLER:SSL\ncontrol.plane.listener.name = CONTROLLER\nthen controller will use \"broker1.example.com:9094\" with security protocol \"SSL\" to connect to the broker.\nIf not explicitly configured, the default value will be null and there will be no dedicated endpoints for controller connections.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "delete.topic.enable": {
    "description": "Enables delete topic. Delete topic through the admin tool will have no effect if this config is turned off",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "host.name": {
    "description": "DEPRECATED: only used when  listeners  is not set. Use  listeners  instead. \nhostname of broker. If this is set, it will only bind to this address. If this is not set, it will bind to all interfaces",
    "type": "string",
    "default": "\"\"",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "leader.imbalance.check.interval.seconds": {
    "description": "The frequency with which the partition rebalance check is triggered by the controller",
    "type": "long",
    "default": "300",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "leader.imbalance.per.broker.percentage": {
    "description": "The ratio of leader imbalance allowed per broker. The controller would trigger a leader balance if it goes above this value per broker. The value is specified in percentage.",
    "type": "int",
    "default": "10",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "listeners": {
    "description": "Listener List - Comma-separated list of URIs we will listen on and the listener names. If the listener name is not a security protocol, listener.security.protocol.map must also be set.\n Specify hostname as 0.0.0.0 to bind to all interfaces.\n Leave hostname empty to bind to default interface.\n Examples of legal listener lists:\n PLAINTEXT://myhost:9092,SSL://:9091\n CLIENT://0.0.0.0:9092,REPLICATION://localhost:9093",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "per-broker"
  },
  "log.dir": {
    "description": "The directory in which the log data is kept (supplemental for log.dirs property)",
    "type": "string",
    "default": "/tmp/kafka-logs",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.dirs": {
    "description": "The directories in which the log data is kept. If not set, the value in log.dir is used",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.flush.interval.messages": {
    "description": "The number of messages accumulated on a log partition before messages are flushed to disk",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.flush.interval.ms": {
    "description": "The maximum time in ms that a message in any topic is kept in memory before flushed to disk. If not set, the value in log.flush.scheduler.interval.ms is used",
    "type": "long",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.flush.offset.checkpoint.interval.ms": {
    "description": "The frequency with which we update the persistent record of the last flush which acts as the log recovery point",
    "type": "int",
    "default": "60000",
    "valid_values": "[0,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.flush.scheduler.interval.ms": {
    "description": "The frequency in ms that the log flusher checks whether any log needs to be flushed to disk",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.flush.start.offset.checkpoint.interval.ms": {
    "description": "The frequency with which we update the persistent record of log start offset",
    "type": "int",
    "default": "60000",
    "valid_values": "[0,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.retention.bytes": {
    "description": "The maximum size of the log before deleting it",
    "type": "long",
    "default": "-1",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.retention.hours": {
    "description": "The number of hours to keep a log file before deleting it (in hours), tertiary to log.retention.ms property",
    "type": "int",
    "default": "168",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.retention.minutes": {
    "description": "The number of minutes to keep a log file before deleting it (in minutes), secondary to log.retention.ms property. If not set, the value in log.retention.hours is used",
    "type": "int",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.retention.ms": {
    "description": "The number of milliseconds to keep a log file before deleting it (in milliseconds), If not set, the value in log.retention.minutes is used. If set to -1, no time limit is applied.",
    "type": "long",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.roll.hours": {
    "description": "The maximum time before a new log segment is rolled out (in hours), secondary to log.roll.ms property",
    "type": "int",
    "default": "168",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.roll.jitter.hours": {
    "description": "The maximum jitter to subtract from logRollTimeMillis (in hours), secondary to log.roll.jitter.ms property",
    "type": "int",
    "default": "0",
    "valid_values": "[0,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "log.roll.jitter.ms": {
    "description": "The maximum jitter to subtract from logRollTimeMillis (in milliseconds). If not set, the value in log.roll.jitter.hours is used",
    "type": "long",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.roll.ms": {
    "description": "The maximum time before a new log segment is rolled out (in milliseconds). If not set, the value in log.roll.hours is used",
    "type": "long",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.segment.bytes": {
    "description": "The maximum size of a single log file",
    "type": "int",
    "default": "1073741824",
    "valid_values": "[14,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "log.segment.delete.delay.ms": {
    "description": "The amount of time to wait before deleting a file from the filesystem",
    "type": "long",
    "default": "60000",
    "valid_values": "[0,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "message.max.bytes": {
    "description": "The largest record batch size allowed by Kafka. If this is increased and there are consumers older than 0.10.2, the consumers' fetch size must also be increased so that the they can fetch record batches this large. In the latest message format version, records are always grouped into batches for efficiency. In previous message format versions, uncompressed records are not grouped into batches and this limit only applies to a single record in that case.This can be set per topic with the topic level  max.message.bytes  config.",
    "type": "int",
    "default": "1000012",
    "valid_values": "[0,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "min.insync.replicas": {
    "description": "When a producer sets acks to \"all\" (or \"-1\"), min.insync.replicas specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend).  When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min.insync.replicas to 2, and produce with acks of \"all\". This will ensure that the producer raises an exception if a majority of replicas do not receive a write. Type: intDefault: 1Valid Values: [1,...]Importance: highUpdate Mode: cluster-wide",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "num.io.threads": {
    "description": "The number of threads that the server uses for processing requests, which may include disk I/O",
    "type": "int",
    "default": "8",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "num.network.threads": {
    "description": "The number of threads that the server uses for receiving requests from the network and sending responses to the network",
    "type": "int",
    "default": "3",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "num.recovery.threads.per.data.dir": {
    "description": "The number of threads per data directory to be used for log recovery at startup and flushing at shutdown",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "num.replica.alter.log.dirs.threads": {
    "description": "The number of threads that can move replicas between log directories, which may include disk I/O",
    "type": "int",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "num.replica.fetchers": {
    "description": "Number of fetcher threads used to replicate messages from a source broker. Increasing this value can increase the degree of I/O parallelism in the follower broker.",
    "type": "int",
    "default": "1",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "offset.metadata.max.bytes": {
    "description": "The maximum size for a metadata entry associated with an offset commit",
    "type": "int",
    "default": "4096",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.commit.required.acks": {
    "description": "The required acks before the commit can be accepted. In general, the default (-1) should not be overridden",
    "type": "short",
    "default": "-1",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.commit.timeout.ms": {
    "description": "Offset commit will be delayed until all replicas for the offsets topic receive the commit or this timeout is reached. This is similar to the producer request timeout.",
    "type": "int",
    "default": "5000",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.load.buffer.size": {
    "description": "Batch size for reading from the offsets segments when loading offsets into the cache (soft-limit, overridden if records are too large).",
    "type": "int",
    "default": "5242880",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.retention.check.interval.ms": {
    "description": "Frequency at which to check for stale offsets",
    "type": "long",
    "default": "600000",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.retention.minutes": {
    "description": "After a consumer group loses all its consumers (i.e. becomes empty) its offsets will be kept for this retention period before getting discarded. For standalone consumers (using manual assignment), offsets will be expired after the time of last commit plus this retention period.",
    "type": "int",
    "default": "10080",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.topic.compression.codec": {
    "description": "Compression codec for the offsets topic - compression may be used to achieve \"atomic\" commits",
    "type": "int",
    "default": "0",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.topic.num.partitions": {
    "description": "The number of partitions for the offset commit topic (should not change after deployment)",
    "type": "int",
    "default": "50",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.topic.replication.factor": {
    "description": "The replication factor for the offsets topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.",
    "type": "short",
    "default": "3",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "offsets.topic.segment.bytes": {
    "description": "The offsets topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads",
    "type": "int",
    "default": "104857600",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "port": {
    "description": "DEPRECATED: only used when  listeners  is not set. Use  listeners  instead. \nthe port to listen and accept connections on",
    "type": "int",
    "default": "9092",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "queued.max.requests": {
    "description": "The number of queued requests allowed for data-plane, before blocking the network threads",
    "type": "int",
    "default": "500",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "quota.consumer.default": {
    "description": "DEPRECATED: Used only when dynamic default quotas are not configured for   or  in Zookeeper. Any consumer distinguished by clientId/consumer group will get throttled if it fetches more bytes than this value per-secondType: longDefault: 9223372036854775807Valid Values: [1,...]Importance: highUpdate Mode: read-only",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "quota.producer.default": {
    "description": "DEPRECATED: Used only when dynamic default quotas are not configured for  ,  or  in Zookeeper. Any producer distinguished by clientId will get throttled if it produces more bytes than this value per-secondType: longDefault: 9223372036854775807Valid Values: [1,...]Importance: highUpdate Mode: read-only",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.fetch.min.bytes": {
    "description": "Minimum bytes expected for each fetch response. If not enough bytes, wait up to replicaMaxWaitTimeMs",
    "type": "int",
    "default": "1",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.fetch.wait.max.ms": {
    "description": "max wait time for each fetcher request issued by follower replicas. This value should always be less than the replica.lag.time.max.ms at all times to prevent frequent shrinking of ISR for low throughput topics",
    "type": "int",
    "default": "500",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.high.watermark.checkpoint.interval.ms": {
    "description": "The frequency with which the high watermark is saved out to disk",
    "type": "long",
    "default": "5000",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.lag.time.max.ms": {
    "description": "If a follower hasn't sent any fetch requests or hasn't consumed up to the leaders log end offset for at least this time, the leader will remove the follower from isr",
    "type": "long",
    "default": "10000",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.socket.receive.buffer.bytes": {
    "description": "The socket receive buffer for network requests",
    "type": "int",
    "default": "65536",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "replica.socket.timeout.ms": {
    "description": "The socket timeout for network requests. Its value should be at least replica.fetch.wait.max.ms",
    "type": "int",
    "default": "30000",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "request.timeout.ms": {
    "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
    "type": "int",
    "default": "30000",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "socket.receive.buffer.bytes": {
    "description": "The SO_RCVBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.",
    "type": "int",
    "default": "102400",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "socket.request.max.bytes": {
    "description": "The maximum number of bytes in a socket request",
    "type": "int",
    "default": "104857600",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "socket.send.buffer.bytes": {
    "description": "The SO_SNDBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.",
    "type": "int",
    "default": "102400",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.max.timeout.ms": {
    "description": "The maximum allowed timeout for transactions. If a client\u00e2\u0080\u0099s requested transaction time exceed this, then the broker will return an error in InitProducerIdRequest. This prevents a client from too large of a timeout, which can stall consumers reading from topics included in the transaction.",
    "type": "int",
    "default": "900000",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.state.log.load.buffer.size": {
    "description": "Batch size for reading from the transaction log segments when loading producer ids and transactions into the cache (soft-limit, overridden if records are too large).",
    "type": "int",
    "default": "5242880",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.state.log.min.isr": {
    "description": "Overridden min.insync.replicas config for the transaction topic.",
    "type": "int",
    "default": "2",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.state.log.num.partitions": {
    "description": "The number of partitions for the transaction topic (should not change after deployment).",
    "type": "int",
    "default": "50",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.state.log.replication.factor": {
    "description": "The replication factor for the transaction topic (set higher to ensure availability). Internal topic creation will fail until the cluster size meets this replication factor requirement.",
    "type": "short",
    "default": "3",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transaction.state.log.segment.bytes": {
    "description": "The transaction topic segment bytes should be kept relatively small in order to facilitate faster log compaction and cache loads",
    "type": "int",
    "default": "104857600",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "transactional.id.expiration.ms": {
    "description": "The time in ms that the transaction coordinator will wait without receiving any transaction status updates for the current transaction before expiring its transactional id. This setting also influences producer id expiration - producer ids are expired once this time has elapsed after the last write with the given producer id. Note that producer ids may expire sooner if the last write from the producer id is deleted due to the topic's retention settings.",
    "type": "int",
    "default": "604800000",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "unclean.leader.election.enable": {
    "description": "Indicates whether to enable replicas not in the ISR set to be elected as leader as a last resort, even though doing so may result in data loss",
    "type": "boolean",
    "default": "false",
    "valid_values": "",
    "importance": "high",
    "update_mode": "cluster-wide"
  },
  "zookeeper.connection.timeout.ms": {
    "description": "The max time that the client waits to establish a connection to zookeeper. If not set, the value in zookeeper.session.timeout.ms is used",
    "type": "int",
    "default": "null",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "zookeeper.max.in.flight.requests": {
    "description": "The maximum number of unacknowledged requests the client will send to Zookeeper before blocking.",
    "type": "int",
    "default": "10",
    "valid_values": "[1,...]",
    "importance": "high",
    "update_mode": "read-only"
  },
  "zookeeper.session.timeout.ms": {
    "description": "Zookeeper session timeout",
    "type": "int",
    "default": "6000",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "zookeeper.set.acl": {
    "description": "Set client to use secure ACLs",
    "type": "boolean",
    "default": "false",
    "valid_values": "",
    "importance": "high",
    "update_mode": "read-only"
  },
  "broker.id.generation.enable": {
    "description": "Enable automatic broker id generation on the server. When enabled the value configured for reserved.broker.max.id should be reviewed.",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "broker.rack": {
    "description": "Rack of the broker. This will be used in rack aware replication assignment for fault tolerance. Examples: `RACK1`, `us-east-1d`",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "connections.max.idle.ms": {
    "description": "Idle connections timeout: the server socket processor threads close the connections that idle more than this",
    "type": "long",
    "default": "600000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "connections.max.reauth.ms": {
    "description": "When explicitly set to a positive number (the default is 0, not a positive number), a session lifetime that will not exceed the configured value will be communicated to v2.2.0 or later clients when they authenticate. The broker will disconnect any such connection that is not re-authenticated within the session lifetime and that is then subsequently used for any purpose other than re-authentication. Configuration names can optionally be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.oauthbearer.connections.max.reauth.ms=3600000",
    "type": "long",
    "default": "0",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "controlled.shutdown.enable": {
    "description": "Enable controlled shutdown of the server",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "controlled.shutdown.max.retries": {
    "description": "Controlled shutdown can fail for multiple reasons. This determines the number of retries when such failure happens",
    "type": "int",
    "default": "3",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "controlled.shutdown.retry.backoff.ms": {
    "description": "Before each retry, the system needs time to recover from the state that caused the previous failure (Controller fail over, replica lag etc). This config determines the amount of time to wait before retrying.",
    "type": "long",
    "default": "5000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "controller.socket.timeout.ms": {
    "description": "The socket timeout for controller-to-broker channels",
    "type": "int",
    "default": "30000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "default.replication.factor": {
    "description": "default replication factors for automatically created topics",
    "type": "int",
    "default": "1",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "delegation.token.expiry.time.ms": {
    "description": "The token validity time in miliseconds before the token needs to be renewed. Default value 1 day.",
    "type": "long",
    "default": "86400000",
    "valid_values": "[1,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "delegation.token.master.key": {
    "description": "Master/secret key to generate and verify delegation tokens. Same key must be configured across all the brokers.  If the key is not set or set to empty string, brokers will disable the delegation token support.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "delegation.token.max.lifetime.ms": {
    "description": "The token has a maximum lifetime beyond which it cannot be renewed anymore. Default value 7 days.",
    "type": "long",
    "default": "604800000",
    "valid_values": "[1,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "delete.records.purgatory.purge.interval.requests": {
    "description": "The purge interval (in number of requests) of the delete records request purgatory",
    "type": "int",
    "default": "1",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "fetch.purgatory.purge.interval.requests": {
    "description": "The purge interval (in number of requests) of the fetch request purgatory",
    "type": "int",
    "default": "1000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "group.initial.rebalance.delay.ms": {
    "description": "The amount of time the group coordinator will wait for more consumers to join a new group before performing the first rebalance. A longer delay means potentially fewer rebalances, but increases the time until processing begins.",
    "type": "int",
    "default": "3000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "group.max.session.timeout.ms": {
    "description": "The maximum allowed session timeout for registered consumers. Longer timeouts give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures.",
    "type": "int",
    "default": "1800000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "group.max.size": {
    "description": "The maximum number of consumers that a single consumer group can accommodate.",
    "type": "int",
    "default": "2147483647",
    "valid_values": "[1,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "group.min.session.timeout.ms": {
    "description": "The minimum allowed session timeout for registered consumers. Shorter timeouts result in quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources.",
    "type": "int",
    "default": "6000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "inter.broker.listener.name": {
    "description": "Name of listener used for communication between brokers. If this is unset, the listener name is defined by security.inter.broker.protocol. It is an error to set this and security.inter.broker.protocol properties at the same time.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "inter.broker.protocol.version": {
    "description": "Specify which version of the inter-broker protocol will be used.\n This is typically bumped after all brokers were upgraded to a new version.\n Example of some valid values are: 0.8.0, 0.8.1, 0.8.1.1, 0.8.2, 0.8.2.0, 0.8.2.1, 0.9.0.0, 0.9.0.1 Check ApiVersion for the full list.",
    "type": "string",
    "default": "2.4-IV1",
    "valid_values": "[0.8.0, 0.8.1, 0.8.2, 0.9.0, 0.10.0-IV0, 0.10.0-IV1, 0.10.1-IV0, 0.10.1-IV1, 0.10.1-IV2, 0.10.2-IV0, 0.11.0-IV0, 0.11.0-IV1, 0.11.0-IV2, 1.0-IV0, 1.1-IV0, 2.0-IV0, 2.0-IV1, 2.1-IV0, 2.1-IV1, 2.1-IV2, 2.2-IV0, 2.2-IV1, 2.3-IV0, 2.3-IV1, 2.4-IV0, 2.4-IV1]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "log.cleaner.backoff.ms": {
    "description": "The amount of time to sleep when there are no logs to clean",
    "type": "long",
    "default": "15000",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.dedupe.buffer.size": {
    "description": "The total memory used for log deduplication across all cleaner threads",
    "type": "long",
    "default": "134217728",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.delete.retention.ms": {
    "description": "How long are delete records retained?",
    "type": "long",
    "default": "86400000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.enable": {
    "description": "Enable the log cleaner process to run on the server. Should be enabled if using any topics with a cleanup.policy=compact including the internal offsets topic. If disabled those topics will not be compacted and continually grow in size.",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "log.cleaner.io.buffer.load.factor": {
    "description": "Log cleaner dedupe buffer load factor. The percentage full the dedupe buffer can become. A higher value will allow more log to be cleaned at once but will lead to more hash collisions",
    "type": "double",
    "default": "0.9",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.io.buffer.size": {
    "description": "The total memory used for log cleaner I/O buffers across all cleaner threads",
    "type": "int",
    "default": "524288",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.io.max.bytes.per.second": {
    "description": "The log cleaner will be throttled so that the sum of its read and write i/o will be less than this value on average",
    "type": "double",
    "default": "1.7976931348623157E308",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.max.compaction.lag.ms": {
    "description": "The maximum time a message will remain ineligible for compaction in the log. Only applicable for logs that are being compacted.",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.min.cleanable.ratio": {
    "description": "The minimum ratio of dirty log to total log for a log to eligible for cleaning. If the log.cleaner.max.compaction.lag.ms or the log.cleaner.min.compaction.lag.ms configurations are also specified, then the log compactor considers the log eligible for compaction as soon as either: (i) the dirty ratio threshold has been met and the log has had dirty (uncompacted) records for at least the log.cleaner.min.compaction.lag.ms duration, or (ii) if the log has had dirty (uncompacted) records for at most the log.cleaner.max.compaction.lag.ms period.",
    "type": "double",
    "default": "0.5",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.min.compaction.lag.ms": {
    "description": "The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.",
    "type": "long",
    "default": "0",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleaner.threads": {
    "description": "The number of background threads to use for log cleaning",
    "type": "int",
    "default": "1",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.cleanup.policy": {
    "description": "The default cleanup policy for segments beyond the retention window. A comma separated list of valid policies. Valid policies are: \"delete\" and \"compact\"",
    "type": "list",
    "default": "delete",
    "valid_values": "[compact, delete]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.index.interval.bytes": {
    "description": "The interval with which we add an entry to the offset index",
    "type": "int",
    "default": "4096",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.index.size.max.bytes": {
    "description": "The maximum size in bytes of the offset index",
    "type": "int",
    "default": "10485760",
    "valid_values": "[4,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.message.format.version": {
    "description": "Specify the message format version the broker will use to append messages to the logs. The value should be a valid ApiVersion. Some examples are: 0.8.2, 0.9.0.0, 0.10.0, check ApiVersion for more details. By setting a particular message format version, the user is certifying that all the existing messages on disk are smaller or equal than the specified version. Setting this value incorrectly will cause consumers with older versions to break as they will receive messages with a format that they don't understand.",
    "type": "string",
    "default": "2.4-IV1",
    "valid_values": "[0.8.0, 0.8.1, 0.8.2, 0.9.0, 0.10.0-IV0, 0.10.0-IV1, 0.10.1-IV0, 0.10.1-IV1, 0.10.1-IV2, 0.10.2-IV0, 0.11.0-IV0, 0.11.0-IV1, 0.11.0-IV2, 1.0-IV0, 1.1-IV0, 2.0-IV0, 2.0-IV1, 2.1-IV0, 2.1-IV1, 2.1-IV2, 2.2-IV0, 2.2-IV1, 2.3-IV0, 2.3-IV1, 2.4-IV0, 2.4-IV1]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "log.message.timestamp.difference.max.ms": {
    "description": "The maximum difference allowed between the timestamp when a broker receives a message and the timestamp specified in the message. If log.message.timestamp.type=CreateTime, a message will be rejected if the difference in timestamp exceeds this threshold. This configuration is ignored if log.message.timestamp.type=LogAppendTime.The maximum timestamp difference allowed should be no greater than log.retention.ms to avoid unnecessarily frequent log rolling.",
    "type": "long",
    "default": "9223372036854775807",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.message.timestamp.type": {
    "description": "Define whether the timestamp in the message is message create time or log append time. The value should be either `CreateTime` or `LogAppendTime`",
    "type": "string",
    "default": "CreateTime",
    "valid_values": "[CreateTime, LogAppendTime]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.preallocate": {
    "description": "Should pre allocate file when create new segment? If you are using Kafka on Windows, you probably need to set it to true.",
    "type": "boolean",
    "default": "false",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "log.retention.check.interval.ms": {
    "description": "The frequency in milliseconds that the log cleaner checks whether any log is eligible for deletion",
    "type": "long",
    "default": "300000",
    "valid_values": "[1,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "max.connections": {
    "description": "The maximum number of connections we allow in the broker at any time. This limit is applied in addition to any per-ip limits configured using max.connections.per.ip. Listener-level limits may also be configured by prefixing the config name with the listener prefix, for example,  listener.name.internal.max.connections . Broker-wide limit should be configured based on broker capacity while listener limits should be configured based on application requirements. New connections are blocked if either the listener or broker limit is reached. Connections on the inter-broker listener are permitted even if broker-wide limit is reached. The least recently used connection on another listener will be closed in this case.",
    "type": "int",
    "default": "2147483647",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "max.connections.per.ip": {
    "description": "The maximum number of connections we allow from each ip address. This can be set to 0 if there are overrides configured using max.connections.per.ip.overrides property. New connections from the ip address are dropped if the limit is reached.",
    "type": "int",
    "default": "2147483647",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "max.connections.per.ip.overrides": {
    "description": "A comma-separated list of per-ip or hostname overrides to the default maximum number of connections. An example value is \"hostName:100,127.0.0.1:200\"",
    "type": "string",
    "default": "\"\"",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "cluster-wide"
  },
  "max.incremental.fetch.session.cache.slots": {
    "description": "The maximum number of incremental fetch sessions that we will maintain.",
    "type": "int",
    "default": "1000",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "num.partitions": {
    "description": "The default number of log partitions per topic",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "password.encoder.old.secret": {
    "description": "The old secret that was used for encoding dynamically configured passwords. This is required only when the secret is updated. If specified, all dynamically encoded passwords are decoded using this old secret and re-encoded using password.encoder.secret when broker starts up.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "password.encoder.secret": {
    "description": "The secret used for encoding dynamically configured passwords for this broker.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "principal.builder.class": {
    "description": "The fully qualified name of a class that implements the KafkaPrincipalBuilder interface, which is used to build the KafkaPrincipal object used during authorization. This config also supports the deprecated PrincipalBuilder interface which was previously used for client authentication over SSL. If no principal builder is defined, the default behavior depends on the security protocol in use. For SSL authentication,  the principal will be derived using the rules defined by  ssl.principal.mapping.rules  applied on the distinguished name from the client certificate if one is provided; otherwise, if client authentication is not required, the principal name will be ANONYMOUS. For SASL authentication, the principal will be derived using the rules defined by  sasl.kerberos.principal.to.local.rules  if GSSAPI is in use, and the SASL authentication ID for other mechanisms. For PLAINTEXT, the principal will be ANONYMOUS.",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "producer.purgatory.purge.interval.requests": {
    "description": "The purge interval (in number of requests) of the producer request purgatory",
    "type": "int",
    "default": "1000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "queued.max.request.bytes": {
    "description": "The number of queued bytes allowed before no more requests are read",
    "type": "long",
    "default": "-1",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "replica.fetch.backoff.ms": {
    "description": "The amount of time to sleep when fetch partition error occurs.",
    "type": "int",
    "default": "1000",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "replica.fetch.max.bytes": {
    "description": "The number of bytes of messages to attempt to fetch for each partition. This is not an absolute maximum, if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. The maximum record batch size accepted by the broker is defined via  message.max.bytes  (broker config) or  max.message.bytes  (topic config).",
    "type": "int",
    "default": "1048576",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "replica.fetch.response.max.bytes": {
    "description": "Maximum bytes expected for the entire fetch response. Records are fetched in batches, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that progress can be made. As such, this is not an absolute maximum. The maximum record batch size accepted by the broker is defined via  message.max.bytes  (broker config) or  max.message.bytes  (topic config).",
    "type": "int",
    "default": "10485760",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "replica.selector.class": {
    "description": "The fully qualified class name that implements ReplicaSelector. This is used by the broker to find the preferred read replica. By default, we use an implementation that returns the leader.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "reserved.broker.max.id": {
    "description": "Max number that can be used for a broker.id",
    "type": "int",
    "default": "1000",
    "valid_values": "[0,...]",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "sasl.client.callback.handler.class": {
    "description": "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "sasl.enabled.mechanisms": {
    "description": "The list of SASL mechanisms enabled in the Kafka server. The list may contain any mechanism for which a security provider is available. Only GSSAPI is enabled by default.",
    "type": "list",
    "default": "GSSAPI",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.jaas.config": {
    "description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described  here . The format for the value is: ' loginModuleClass controlFlag (optionName=optionValue)*; '. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.kinit.cmd": {
    "description": "Kerberos kinit command path.",
    "type": "string",
    "default": "/usr/bin/kinit",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.min.time.before.relogin": {
    "description": "Login thread sleep time between refresh attempts.",
    "type": "long",
    "default": "60000",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.principal.to.local.rules": {
    "description": "A list of rules for mapping from principal names to short names (typically operating system usernames). The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, principal names of the form {username}/{hostname}@{REALM} are mapped to {username}. For more details on the format please see   security authorization and acls . Note that this configuration is ignored if an extension of KafkaPrincipalBuilder is provided by the  principal.builder.class  configuration.",
    "type": "list",
    "default": "DEFAULT",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.service.name": {
    "description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.ticket.renew.jitter": {
    "description": "Percentage of random jitter added to the renewal time.",
    "type": "double",
    "default": "0.05",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.kerberos.ticket.renew.window.factor": {
    "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.",
    "type": "double",
    "default": "0.8",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.login.callback.handler.class": {
    "description": "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "sasl.login.class": {
    "description": "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "sasl.login.refresh.buffer.seconds": {
    "description": "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of  300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
    "type": "short",
    "default": "300",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.login.refresh.min.period.seconds": {
    "description": "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified.  This value and  sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
    "type": "short",
    "default": "60",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.login.refresh.window.factor": {
    "description": "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
    "type": "double",
    "default": "0.8",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.login.refresh.window.jitter": {
    "description": "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
    "type": "double",
    "default": "0.05",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.mechanism.inter.broker.protocol": {
    "description": "SASL mechanism used for inter-broker communication. Default is GSSAPI.",
    "type": "string",
    "default": "GSSAPI",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "sasl.server.callback.handler.class": {
    "description": "The fully qualified name of a SASL server callback handler class that implements the AuthenticateCallbackHandler interface. Server callback handlers must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.plain.sasl.server.callback.handler.class=com.example.CustomPlainCallbackHandler.",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "security.inter.broker.protocol": {
    "description": "Security protocol used to communicate between brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL. It is an error to set this and inter.broker.listener.name properties at the same time.",
    "type": "string",
    "default": "PLAINTEXT",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "read-only"
  },
  "ssl.cipher.suites": {
    "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
    "type": "list",
    "default": "\"\"",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.client.auth": {
    "description": "Configures kafka broker to request client authentication. The following settings are common:",
    "type": "ssl.client.auth=required If set to required client authentication is required. ssl.client.auth=requested This means client authentication is optional. unlike requested , if this option is set client can choose not to provide authentication information about itself ssl.client.auth=none This means client authentication is not needed.",
    "default": "ssl.client.auth=requested This means client authentication is optional. unlike requested , if this option is set client can choose not to provide authentication information about itself ssl.client.auth=none This means client authentication is not needed.",
    "valid_values": "ssl.client.auth=none This means client authentication is not needed.",
    "importance": null,
    "update_mode": null
  },
  "ssl.enabled.protocols": {
    "description": "The list of protocols enabled for SSL connections.",
    "type": "list",
    "default": "TLSv1.2,TLSv1.1,TLSv1",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.key.password": {
    "description": "The password of the private key in the key store file. This is optional for client.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.keymanager.algorithm": {
    "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
    "type": "string",
    "default": "SunX509",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.keystore.location": {
    "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.keystore.password": {
    "description": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.keystore.type": {
    "description": "The file format of the key store file. This is optional for client.",
    "type": "string",
    "default": "JKS",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.protocol": {
    "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.",
    "type": "string",
    "default": "TLS",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.provider": {
    "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.trustmanager.algorithm": {
    "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
    "type": "string",
    "default": "PKIX",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.truststore.location": {
    "description": "The location of the trust store file.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.truststore.password": {
    "description": "The password for the trust store file. If a password is not set access to the truststore is still available, but integrity checking is disabled.",
    "type": "password",
    "default": "null",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "ssl.truststore.type": {
    "description": "The file format of the trust store file.",
    "type": "string",
    "default": "JKS",
    "valid_values": "",
    "importance": "medium",
    "update_mode": "per-broker"
  },
  "alter.config.policy.class.name": {
    "description": "The alter configs policy class that should be used for validation. The class should implement the  org.apache.kafka.server.policy.AlterConfigPolicy  interface.",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "alter.log.dirs.replication.quota.window.num": {
    "description": "The number of samples to retain in memory for alter log dirs replication quotas",
    "type": "int",
    "default": "11",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "alter.log.dirs.replication.quota.window.size.seconds": {
    "description": "The time span of each sample for alter log dirs replication quotas",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "authorizer.class.name": {
    "description": "The fully qualified name of a class that implements sorg.apache.kafka.server.authorizer.Authorizer interface, which is used by the broker for authorization. This config also supports authorizers that implement the deprecated kafka.security.auth.Authorizer trait which was previously used for authorization.",
    "type": "string",
    "default": "\"\"",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "client.quota.callback.class": {
    "description": "The fully qualified name of a class that implements the ClientQuotaCallback interface, which is used to determine quota limits applied to client requests. By default,  ,  or  quotas stored in ZooKeeper are applied. For any given request, the most specific quota that matches the user principal of the session and the client-id of the request is applied.Type: classDefault: nullValid Values: Importance: lowUpdate Mode: read-only",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "connection.failed.authentication.delay.ms": {
    "description": "Connection close delay on failed authentication: this is the time (in milliseconds) by which connection close will be delayed on authentication failure. This must be configured to be less than connections.max.idle.ms to prevent connection timeout.",
    "type": "int",
    "default": "100",
    "valid_values": "[0,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "create.topic.policy.class.name": {
    "description": "The create topic policy class that should be used for validation. The class should implement the  org.apache.kafka.server.policy.CreateTopicPolicy  interface.",
    "type": "class",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "delegation.token.expiry.check.interval.ms": {
    "description": "Scan interval to remove expired delegation tokens.",
    "type": "long",
    "default": "3600000",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "kafka.metrics.polling.interval.secs": {
    "description": "The metrics polling interval (in seconds) which can be used in kafka.metrics.reporters implementations.",
    "type": "int",
    "default": "10",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "kafka.metrics.reporters": {
    "description": "A list of classes to use as Yammer metrics custom reporters. The reporters should implement  kafka.metrics.KafkaMetricsReporter  trait. If a client wants to expose JMX operations on a custom reporter, the custom reporter needs to additionally implement an MBean trait that extends  kafka.metrics.KafkaMetricsReporterMBean  trait so that the registered MBean is compliant with the standard MBean convention.",
    "type": "list",
    "default": "\"\"",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "listener.security.protocol.map": {
    "description": "Map between listener names and security protocols. This must be defined for the same security protocol to be usable in more than one port or IP. For example, internal and external traffic can be separated even if SSL is required for both. Concretely, the user could define listeners with names INTERNAL and EXTERNAL and this property as: `INTERNAL:SSL,EXTERNAL:SSL`. As shown, key and value are separated by a colon and map entries are separated by commas. Each listener name should only appear once in the map. Different security (SSL and SASL) settings can be configured for each listener by adding a normalised prefix (the listener name is lowercased) to the config name. For example, to set a different keystore for the INTERNAL listener, a config with name  listener.name.internal.ssl.keystore.location  would be set. If the config for the listener name is not set, the config will fallback to the generic config (i.e.  ssl.keystore.location ).",
    "type": "string",
    "default": "PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL",
    "valid_values": "",
    "importance": "low",
    "update_mode": "per-broker"
  },
  "log.message.downconversion.enable": {
    "description": "This configuration controls whether down-conversion of message formats is enabled to satisfy consume requests. When set to  false , broker will not perform down-conversion for consumers expecting an older message format. The broker responds with  UNSUPPORTED_VERSION  error for consume requests from such older clients. This configurationdoes not apply to any message format conversion that might be required for replication to followers.",
    "type": "boolean",
    "default": "true",
    "valid_values": "",
    "importance": "low",
    "update_mode": "cluster-wide"
  },
  "metric.reporters": {
    "description": "A list of classes to use as metrics reporters. Implementing the  org.apache.kafka.common.metrics.MetricsReporter  interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
    "type": "list",
    "default": "\"\"",
    "valid_values": "",
    "importance": "low",
    "update_mode": "cluster-wide"
  },
  "metrics.num.samples": {
    "description": "The number of samples maintained to compute metrics.",
    "type": "int",
    "default": "2",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "metrics.recording.level": {
    "description": "The highest recording level for metrics.",
    "type": "string",
    "default": "INFO",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "metrics.sample.window.ms": {
    "description": "The window of time a metrics sample is computed over.",
    "type": "long",
    "default": "30000",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "password.encoder.cipher.algorithm": {
    "description": "The Cipher algorithm used for encoding dynamically configured passwords.",
    "type": "string",
    "default": "AES/CBC/PKCS5Padding",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "password.encoder.iterations": {
    "description": "The iteration count used for encoding dynamically configured passwords.",
    "type": "int",
    "default": "4096",
    "valid_values": "[1024,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "password.encoder.key.length": {
    "description": "The key length used for encoding dynamically configured passwords.",
    "type": "int",
    "default": "128",
    "valid_values": "[8,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "password.encoder.keyfactory.algorithm": {
    "description": "The SecretKeyFactory algorithm used for encoding dynamically configured passwords. Default is PBKDF2WithHmacSHA512 if available and PBKDF2WithHmacSHA1 otherwise.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "quota.window.num": {
    "description": "The number of samples to retain in memory for client quotas",
    "type": "int",
    "default": "11",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "quota.window.size.seconds": {
    "description": "The time span of each sample for client quotas",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "replication.quota.window.num": {
    "description": "The number of samples to retain in memory for replication quotas",
    "type": "int",
    "default": "11",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "replication.quota.window.size.seconds": {
    "description": "The time span of each sample for replication quotas",
    "type": "int",
    "default": "1",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "security.providers": {
    "description": "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the  org.apache.kafka.common.security.auth.SecurityProviderCreator  interface.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "ssl.endpoint.identification.algorithm": {
    "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
    "type": "string",
    "default": "https",
    "valid_values": "",
    "importance": "low",
    "update_mode": "per-broker"
  },
  "ssl.principal.mapping.rules": {
    "description": "A list of rules for mapping from distinguished name from the client certificate to short name. The rules are evaluated in order and the first rule that matches a principal name is used to map it to a short name. Any later rules in the list are ignored. By default, distinguished name of the X.500 certificate will be the principal. For more details on the format please see   security authorization and acls . Note that this configuration is ignored if an extension of KafkaPrincipalBuilder is provided by the  principal.builder.class  configuration.",
    "type": "string",
    "default": "DEFAULT",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  },
  "ssl.secure.random.implementation": {
    "description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
    "type": "string",
    "default": "null",
    "valid_values": "",
    "importance": "low",
    "update_mode": "per-broker"
  },
  "transaction.abort.timed.out.transaction.cleanup.interval.ms": {
    "description": "The interval at which to rollback transactions that have timed out",
    "type": "int",
    "default": "60000",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "transaction.remove.expired.transaction.cleanup.interval.ms": {
    "description": "The interval at which to remove transactions that have expired due to  transactional.id.expiration.ms  passing",
    "type": "int",
    "default": "3600000",
    "valid_values": "[1,...]",
    "importance": "low",
    "update_mode": "read-only"
  },
  "zookeeper.sync.time.ms": {
    "description": "How far a ZK follower can be behind a ZK leader",
    "type": "int",
    "default": "2000",
    "valid_values": "",
    "importance": "low",
    "update_mode": "read-only"
  }
}